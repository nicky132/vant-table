import { describe, it, expect } from 'vitest'
import { mount } from '@vue/test-utils'
import { nextTick } from 'vue'
import VantTable from '../src/VantTable.vue'

describe('VantTable Selection Features', () => {
  const mockHeaders = [
    { key: 'id', label: 'ID', width: 100 },
    { key: 'name', label: '姓名', width: 120 },
    { key: 'status', label: '状态', width: 100 }
  ]

  const mockData = [
    { id: 1, name: '张三', status: '在职' },
    { id: 2, name: '李四', status: '在职' },
    { id: 3, name: '王五', status: '离职' },
    { id: 4, name: '赵六', status: '在职' }
  ]

  describe('多选模式测试', () => {
    it('应该支持多选功能', async () => {
      const wrapper = mount(VantTable, {
        props: {
          headers: mockHeaders,
          data: mockData,
          selectable: true,
          selectMode: 'checkbox',
          rowKey: 'id'
        }
      })

      await nextTick()
      const instance = wrapper.vm

      // 选择多行
      instance.handleRowSelect(mockData[0], 0, true)
      instance.handleRowSelect(mockData[1], 1, true)

      expect(instance.selectedRowKeys.length).toBe(2)
      expect(instance.selectedRowKeys).toContain('1')
      expect(instance.selectedRowKeys).toContain('2')
    })

    it('应该支持全选功能', async () => {
      const wrapper = mount(VantTable, {
        props: {
          headers: mockHeaders,
          data: mockData,
          selectable: true,
          selectMode: 'checkbox',
          rowKey: 'id'
        }
      })

      await nextTick()
      const instance = wrapper.vm

      // 执行全选
      instance.handleSelectAll(true)

      // 验证所有可选行都被选中（离职员工除外）
      const selectableCount = mockData.filter(row => row.status !== '离职').length
      expect(instance.selectedRowKeys.length).toBe(selectableCount)
    })

    it('应该支持取消全选', async () => {
      const wrapper = mount(VantTable, {
        props: {
          headers: mockHeaders,
          data: mockData,
          selectable: true,
          selectMode: 'checkbox',
          rowKey: 'id'
        }
      })

      await nextTick()
      const instance = wrapper.vm

      // 先全选
      instance.handleSelectAll(true)
      expect(instance.selectedRowKeys.length).toBeGreaterThan(0)

      // 取消全选
      instance.handleSelectAll(false)
      expect(instance.selectedRowKeys.length).toBe(0)
    })

    it('应该正确计算全选状态', async () => {
      const wrapper = mount(VantTable, {
        props: {
          headers: mockHeaders,
          data: mockData,
          selectable: true,
          selectMode: 'checkbox',
          rowKey: 'id'
        }
      })

      await nextTick()
      const instance = wrapper.vm

      // 初始状态
      expect(instance.isAllSelected()).toBe(false)
      expect(instance.isIndeterminate()).toBe(false)

      // 选择部分行
      instance.handleRowSelect(mockData[0], 0, true)
      expect(instance.isAllSelected()).toBe(false)
      expect(instance.isIndeterminate()).toBe(true)

      // 选择所有可选行
      instance.handleSelectAll(true)
      expect(instance.isAllSelected()).toBe(true)
      expect(instance.isIndeterminate()).toBe(false)
    })
  })

  describe('单选模式测试', () => {
    it('应该支持单选功能', async () => {
      const wrapper = mount(VantTable, {
        props: {
          headers: mockHeaders,
          data: mockData,
          selectable: true,
          selectMode: 'radio',
          rowKey: 'id'
        }
      })

      await nextTick()
      const instance = wrapper.vm

      // 选择第一行
      instance.handleRowSelect(mockData[0], 0, true)
      expect(instance.selectedRowKeys.length).toBe(1)
      expect(instance.selectedRowKeys[0]).toBe('1')

      // 选择第二行，应该替换第一行
      instance.handleRowSelect(mockData[1], 1, true)
      expect(instance.selectedRowKeys.length).toBe(1)
      expect(instance.selectedRowKeys[0]).toBe('2')
    })

    it('单选模式下不应该支持全选', async () => {
      const wrapper = mount(VantTable, {
        props: {
          headers: mockHeaders,
          data: mockData,
          selectable: true,
          selectMode: 'radio',
          rowKey: 'id'
        }
      })

      await nextTick()
      const instance = wrapper.vm

      // 尝试全选
      instance.handleSelectAll(true)

      // 单选模式下全选应该无效
      expect(instance.selectedRowKeys.length).toBe(0)
    })
  })

  describe('选择限制测试', () => {
    it('应该支持最大选择数量限制', async () => {
      const wrapper = mount(VantTable, {
        props: {
          headers: mockHeaders,
          data: mockData,
          selectable: true,
          selectMode: 'checkbox',
          maxSelectCount: 2,
          rowKey: 'id'
        }
      })

      await nextTick()
      const instance = wrapper.vm

      // 选择第一行
      instance.handleRowSelect(mockData[0], 0, true)
      expect(instance.selectedRowKeys.length).toBe(1)

      // 选择第二行
      instance.handleRowSelect(mockData[1], 1, true)
      expect(instance.selectedRowKeys.length).toBe(2)

      // 尝试选择第三行，应该被限制
      instance.handleRowSelect(mockData[3], 3, true)
      expect(instance.selectedRowKeys.length).toBe(2) // 不应该增加
    })

    it('应该支持选择过滤', async () => {
      const selectableFilter = (row: any) => row.status !== '离职'

      const wrapper = mount(VantTable, {
        props: {
          headers: mockHeaders,
          data: mockData,
          selectable: true,
          selectMode: 'checkbox',
          selectableFilter,
          rowKey: 'id'
        }
      })

      await nextTick()
      const instance = wrapper.vm

      // 尝试选择离职员工
      expect(instance.isRowDisabled(mockData[2], 2)).toBe(true)

      // 选择在职员工
      expect(instance.isRowDisabled(mockData[0], 0)).toBe(false)
    })
  })

  describe('选择事件测试', () => {
    it('应该正确触发选择变化事件', async () => {
      const wrapper = mount(VantTable, {
        props: {
          headers: mockHeaders,
          data: mockData,
          selectable: true,
          selectMode: 'checkbox',
          rowKey: 'id'
        }
      })

      await nextTick()
      const instance = wrapper.vm

      // 选择一行
      instance.handleRowSelect(mockData[0], 0, true)

      // 验证事件被触发
      expect(wrapper.emitted('selection-change')).toBeTruthy()
      expect(wrapper.emitted('select')).toBeTruthy()
    })

    it('应该正确触发全选事件', async () => {
      const wrapper = mount(VantTable, {
        props: {
          headers: mockHeaders,
          data: mockData,
          selectable: true,
          selectMode: 'checkbox',
          rowKey: 'id'
        }
      })

      await nextTick()
      const instance = wrapper.vm

      // 执行全选
      instance.handleSelectAll(true)

      // 验证事件被触发
      expect(wrapper.emitted('select-all')).toBeTruthy()
      const selectAllEvent = wrapper.emitted('select-all')[0][0]
      expect(selectAllEvent.checked).toBe(true)
    })
  })

  describe('v-model 支持测试', () => {
    it('应该支持 v-model:selected-keys', async () => {
      const wrapper = mount(VantTable, {
        props: {
          headers: mockHeaders,
          data: mockData,
          selectable: true,
          selectMode: 'checkbox',
          rowKey: 'id',
          selectedKeys: ['1', '2']
        }
      })

      await nextTick()
      const instance = wrapper.vm

      // 验证初始选中状态
      const selectedKeys = instance.getSelectedRowKeys()
      expect(selectedKeys).toContain('1')
      expect(selectedKeys).toContain('2')

      // 修改选择状态
      instance.handleRowSelect(mockData[2], 2, true)

      // 验证 update:selected-keys 事件被触发
      expect(wrapper.emitted('update:selected-keys')).toBeTruthy()
    })
  })

  describe('批量操作测试', () => {
    it('应该支持批量删除', async () => {
      const wrapper = mount(VantTable, {
        props: {
          headers: mockHeaders,
          data: mockData,
          selectable: true,
          selectMode: 'checkbox',
          rowKey: 'id'
        }
      })

      await nextTick()
      const instance = wrapper.vm

      // 选择多行
      instance.handleRowSelect(mockData[0], 0, true)
      instance.handleRowSelect(mockData[1], 1, true)

      // 触发批量删除
      instance.handleBatchDelete()

      // 验证事件被触发
      expect(wrapper.emitted('batch-delete')).toBeTruthy()
      const batchDeleteEvent = wrapper.emitted('batch-delete')[0][0]
      expect(batchDeleteEvent.selectedRowKeys.length).toBe(2)
    })
  })
})